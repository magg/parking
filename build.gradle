plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'jacoco'
    id 'java-library'
    id 'maven'
    id 'signing'
}

group 'com.github.magg'
version '1.0.0-SNAPSHOT'
archivesBaseName = "parking"

sourceCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.28'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    testCompile 'org.powermock:powermock-api-mockito2:2.0.2'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:2.0.2'
    testCompile 'org.powermock:powermock-module-junit4-rule:2.0.2'
    testCompile 'org.powermock:powermock-module-junit4:2.0.2'


}
eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}


allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}


test {

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }

    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }

    testLogging.showStandardStreams = true
}

javadoc {
    destinationDir = file('./doc')
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}



jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1.0
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}



jacocoTestReport.dependsOn test
jacocoTestCoverageVerification.dependsOn jacocoTestReport

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'parking'
                packaging 'jar'
                // optionally artifactId can be defined here
                description = 'A Toll Parking library in Java'
                url = 'https://github.com/magg/parking'

                scm {
                    connection = 'scm:git:git://github.com/magg/parking.git'
                    developerConnection = 'scm:git:ssh://github.com/magg/parking.git'
                    url = 'https://github.com/magg/parking'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'magg'
                        name = 'Miguel Gonzalez'
                        email = 'maggonzz@gmail.com'
                    }
                }
            }
        }
    }
}

import org.gradle.plugins.signing.Sign
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
            task.enabled = false
        }
    }
}
signing
        {
            sign configurations.archives
        }
build.dependsOn.remove(signArchives)